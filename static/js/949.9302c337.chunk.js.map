{"version":3,"file":"static/js/949.9302c337.chunk.js","mappings":"+OAEaA,E,OAAOC,EAAAA,EAAH,uF,SCyBjB,EArBa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GAAII,KAAKL,EACpB,GAAE,CAACC,KAGF,yBACGF,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,KAAMN,EAAT,EAASA,GAAIO,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,2BACE,gBAAKC,KAAKC,EAAAA,EAAAA,GAASH,GAAeI,IAAKL,EAAMM,MAAO,MACpD,SAACjB,EAAD,UAAOW,KACP,UAACX,EAAD,yBAAkBa,OAHXR,EADD,KASf,C,8MCtBKa,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAgB,mCAAG,oGACPD,EAAAA,EAAAA,IAAA,sBAAiC,CACtDE,OAAQ,CACNC,QAASJ,KAHiB,cACxBK,EADwB,yBAMvBA,EAASC,KAAKC,SANS,2CAAH,qDAShBC,EAAiB,mCAAG,WAAMrB,GAAN,uFACRc,EAAAA,EAAAA,IAAA,gBAAmBd,GAAM,CAC9CgB,OAAQ,CACNC,QAASJ,KAHkB,cACzBK,EADyB,yBAMxBA,EAASC,MANe,2CAAH,sDASjBhB,EAAS,mCAAG,WAAMH,GAAN,uFACAc,EAAAA,EAAAA,IAAA,gBAAmBd,EAAnB,YAAiC,CACtDgB,OAAQ,CACNC,QAASJ,KAHU,cACjBK,EADiB,yBAMhBA,EAASC,KAAKrB,MANE,2CAAH,sDASTwB,EAAY,mCAAG,WAAMtB,GAAN,uFACHc,EAAAA,EAAAA,IAAA,gBAAmBd,EAAnB,YAAiC,CACtDgB,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,sDASZG,EAAkB,mCAAG,WAAMC,GAAN,uFACTV,EAAAA,EAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CACNC,QAASJ,EACTW,MAAAA,KAJ4B,cAC1BN,EAD0B,yBAQzBA,EAASC,KAAKC,SARW,2CAAH,sDAW/BC,EAAkBI,UAAY,CAC5BzB,GAAI0B,IAAAA,OAAAA,YAGNvB,EAAUsB,UAAY,CACpBzB,GAAI0B,IAAAA,OAAAA,YAGNJ,EAAaG,UAAY,CACvBzB,GAAI0B,IAAAA,OAAAA,YAGNH,EAAmBE,UAAY,CAC7BzB,GAAI0B,IAAAA,OAAAA,W,0EChEOhB,EAAW,SAAAiB,GACtB,GAAIA,EAAO,MAAM,kCAAN,OAAyCA,EACrD,EAEDjB,EAASe,UAAY,CACnBE,MAAOD,IAAAA,OAAAA,W","sources":["components/cast/cast.styled.js","components/cast/cast.js","helpers/FetchAPI.js","helpers/getImage.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  margin-left: 20px;\n  font-weight: 700;\n`;\n","import { fetchCast } from 'helpers/FetchAPI';\nimport { getImage } from 'helpers/getImage';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Text } from './cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    fetchCast(id).then(setCast);\n  }, [id]);\n\n  return (\n    <div>\n      {cast.map(({ name, id, profile_path, character }) => (\n        <li key={id}>\n          <img src={getImage(profile_path)} alt={name} width={80} />\n          <Text>{name}</Text>\n          <Text>Character: {character}</Text>\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = 'e921f15ae860f6e4269e7dedfe9b8c39';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendMovies = async () => {\n  const response = await axios.get(`trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n\n  return response.data.results;\n};\n\nfetchMovieDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchReviews.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMoviesByQuery.propTypes = {\n  id: PropTypes.string.isRequired,\n};","import PropTypes from 'prop-types';\n\nexport const getImage = image => {\n  if (image) return `https://image.tmdb.org/t/p/w500${image}`;\n};\n\ngetImage.propTypes = {\n  image: PropTypes.string.isRequired,\n};"],"names":["Text","styled","useState","cast","setCast","id","useParams","useEffect","fetchCast","then","map","name","profile_path","character","src","getImage","alt","width","API_KEY","axios","fetchTrendMovies","params","api_key","response","data","results","fetchMovieDetails","fetchReviews","fetchMoviesByQuery","query","propTypes","PropTypes","image"],"sourceRoot":""}